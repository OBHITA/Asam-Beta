@using Pillar.Common.Utility
@using Asam.Ppc.Service.Messages.Organization
@using Asam.Ppc.Service.Messages.Security
@model StaffDto

@{
    Layout = "~/Views/Organization/Layout.cshtml";
    var disable = !Html.CanAccess("Staff", "Edit", "POST") ? "true" : "false";
    ViewBag.Title = "Staff Editor";
}

    <div class="staff-editor editor">
        <div class="editor-content" data-disabled="@disable">
            <div class="questions">
            @using ( Html.BeginForm ( "Edit", "Staff", new {id = Model.Key}, FormMethod.Post, new {id = "staff-editor-form"} ) )
            {
                @Html.HiddenFor( m => m.Key, new {id = "current-staff-key"} )
                <fieldset>
                    <legend>Staff Demographics</legend>
                    <div class="question-root @PropertyUtil.ExtractPropertyName( () => Model.Name )" data-ajax-container="true">    
                        <div class="question-answer-wrapper">
                            @Html.EditorFor( m => m.Name, new {placeholder = Html.DisplayNameFor ( m => m.Name )} )
                            <div class="clear"></div>
                        </div>
                    </div>
                    <div class="question-root @PropertyUtil.ExtractPropertyName( () => Model.Email )" data-ajax-container="true">
                        <div>
                            @Html.LabelFor( m => m.Email )
                        </div>
                        <div class="question-answer-wrapper">
                            @Html.TextBoxFor( m => m.Email, new {placeholder = Html.DisplayNameFor ( m => m.Email ), type = "email"} )
                            <div class="clear"></div>
                        </div>
                    </div>
                    <div class="question-root @PropertyUtil.ExtractPropertyName( () => Model.Location )" data-ajax-container="true">
                        <div>
                            @Html.LabelFor( m => m.Location )
                        </div>
                        <div class="question-answer-wrapper">
                            @Html.TextBoxFor( m => m.Location, new {placeholder = Html.DisplayNameFor ( m => m.Location )} )
                            <div class="clear"></div>
                        </div>
                    </div>
                    <div class="question-root @PropertyUtil.ExtractPropertyName( () => Model.NPI )" data-ajax-container="true">
                        <div>
                            @Html.LabelFor( m => m.NPI )
                        </div>
                        <div class="question-answer-wrapper">
                            @Html.TextBoxFor( m => m.NPI, new {placeholder = Html.DisplayNameFor ( m => m.NPI )} )
                            <div class="clear"></div>
                        </div>                
                    </div>
                </fieldset>
            }
            
                @*<div class="teams">
                    <fieldset>
                        <legend>Team Assignment</legend>
                        <input type="text" placeholder="Search" data-control="finder" data-ajaxform-ignore="true" data-finder-url="/api/Team/FinderSearch" data-finder-display="Name"/>
                        <a class="add-btn btn btn-success" data-icon="&#xe102;" disabled="disabled">Add</a>
                        <div>
                            <ul class="current-teams"></ul>
                        </div>
                    </fieldset>
                </div>*@

                <div class="@PropertyUtil.ExtractPropertyName( () => Model.SystemAccount )">
                    <fieldset>
                        <legend>System Account</legend>
                        <div id="system-account-content">
                            @if ( Model.HasAccount )
                            {
                                @Html.EditorFor( m => m.SystemAccount )
                            }
                            else
                            {
                                if ( Html.CanAccess ( "Staff", "CreateAccount", "POST" ) )
                                {
                                    using (Html.BeginForm("CreateAccount", "Staff", new { id = Model.Key }, FormMethod.Post, new { id = "createAccountForm" }))
                                     {
                                         <div>
                                             @{
                                                 var systemAccount = new SystemAccountDto { Username = Model.Email, Email = Model.Email, CreateNew = true };
                                                 ViewData.TemplateInfo.HtmlFieldPrefix = "";
                                             }
                                             @Html.EditorFor( m => systemAccount )
                                            <input type="submit" value="Create"/>
                                         </div>
                                     }
                                }
                            }
                        </div>
                    </fieldset>
                </div>
            </div>
        </div>
    </div>

@section footerBody
{
    <a id="staff-submit" class="submit" href="#" type="button">Save</a>
    @Html.ActionLink("Cancel", "Index", "Organization", null, new { @class = "cancel" })
}

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function() {
            $('#staff-submit').click(function(e) {
                e.stopImmediatePropagation();
                e.stopPropagation();
                e.preventDefault();
                $('#staff-editor-form')[0].submit();
            });

            var staffBaseUri = '@Url.Content("~/Staff")';
            var teamBaseUri = '@Url.Content("~/Team")';
            var teamApiBaseUri = '@Url.Content("~/api/Team")';

            var initiateAssignRoleAjaxLinks = function() {
                var $container = $('#roles-container');
                $("#add-roles-btn").ajaxLink({
                    url: staffBaseUri + '/AddRoles/' + '@Model.Key',
                    success: function() {
                        $container.attr("data-ajax-status", "success");
                        $("#available-roles > option:selected").each(function() {
                            $(this).remove().appendTo("#current-roles");
                        });
                        $("#available-roles").change();
                        $("#current-roles").change();
                    },
                    getData: function() {
                        $container.attr("data-ajax-status", "loading");
                        var data = {};
                        data["roleKeys"] = new Array();
                        $('#available-roles option:selected').each(function() {
                            data["roleKeys"].push(this.value);
                        });
                        if (data["roleKeys"].length == 0) {
                            return false;
                        }
                        return data;
                    },
                    complete: function() {
                        setTimeout(function() { $container.removeAttr("data-ajax-status"); }, 8000);
                    },
                    error: function() {
                        $container.attr("data-ajax-status", "fail");
                    }
                });
                $("#remove-roles-btn").ajaxLink({
                    url: staffBaseUri + '/RemoveRoles/' + '@Model.Key',
                    success: function() {
                        $container.attr("data-ajax-status", "success");
                        $("#current-roles > option:selected").each(function() {
                            $(this).remove().appendTo("#available-roles");
                        });
                        $("#available-roles").change();
                        $("#current-roles").change();
                    },
                    getData: function() {
                        $container.attr("data-ajax-status", "loading");
                        var data = {};
                        data["roleKeys"] = new Array();
                        $('#current-roles option:selected').each(function() {
                            data["roleKeys"].push(this.value);
                        });
                        if (data["roleKeys"].length == 0) {
                            return false;
                        }
                        return data;
                    },
                    complete: function() {
                        setTimeout(function() { $container.removeAttr("data-ajax-status"); }, 8000);
                    },
                    error: function() {
                        $container.attr("data-ajax-status", "fail");
                    }
                });
            };

            var staffKey = $('#current-staff-key').val();

            initiateAssignRoleAjaxLinks();

            $("#create-account-btn").ajaxLink({
                url: staffBaseUri + '/CreateAccount/' + staffKey,
                success: function(data) {
                    var $account = $('#system-account-content');
                    $('#createAccountModal').modal("hide");
                    $account.html(data);
                    $('#system-account-content .system-account').find(":input").prop('disabled', true);
                    initiateAssignRoleAjaxLinks();
                },
                error: function(jqXhr) {
                    var $error = $('#system-account-content div.field-validation-error');
                    $error.removeClass('hidden');
                    $error.html(jqXhr.statusText);
                },
                getData: function() {
                    var data = {};
                    var valid = true;
                    $('#createAccountModal').find('.modal-body :input').each(function() {
                        data[this.name] = this.value;
                        valid = valid & $(this).valid();
                    });

                    if (!valid) {
                        return false;
                    }
                    return data;
                }
            });

            $('#createAccountModal').on("hidden", function() {
                $('#system-account-content div.field-validation-error').addClass('hidden');
            });

            $('#createAccountModal').on('show', function() {
                $('#createAccountModal #systemAccount_Email').val($('#Email').val());

                function isValidUsername(value) {
                    var dtRegex = new RegExp(/^[a-zA-Z0-9._@@]+$/);
                    return dtRegex.test(value);
                }

                $.validator.addMethod("validUsername", function(value) {
                    return isValidUsername(value);
                }, "The username can only contain letters, numbers, dot(.), at sign(@@) and underscore(_).");
                $('#systemAccount_Username').rules('add', { validUsername: true });
            });

            $('#link-account-btn').on('click', function() {
                $("#link-account-btn").ajaxLink({
                    url: staffBaseUri + '/LinkAccount/' + staffKey,
                    success: function(data) {
                        var $account = $('#system-account-content');
                        $('#linkAccountModal').modal("hide");
                        $account.html(data);
                        $('#system-account-content .system-account').find(":input").prop('disabled', true);
                        initiateAssignRoleAjaxLinks();
                    },
                    error: function(jqXhr) {
                        var $error = $('#system-account-content div.field-validation-error');
                        $error.removeClass('hidden');
                        $error.html(jqXhr.statusText);
                    },
                    getData: function() {
                        var data = {};
                        var valid = true;
                        $('#linkAccountModal').find('.modal-body :input').each(function() {
                            data[this.name] = this.value;
                            valid = valid & $(this).valid();
                        });

                        if (!valid) {
                            return false;
                        }
                        return data;
                    }
                });
            });

            $('#linkAccountModal').on("hidden", function() {
                $('#system-account-content div.field-validation-error').addClass('hidden');
            });

            $('#linkAccountModal').on('show', function() {
                $('#linkAccountModal #systemAccount_Email').val($('#Email').val());
            });

            $('#system-account-content').on('change', '#available-roles', function() {
                if ($("#available-roles :selected").length > 0) {
                    $("#add-roles-btn").removeClass("disabled");
                } else {
                    $("#add-roles-btn").addClass("disabled");
                }
            });

            $('#system-account-content').on('change', '#current-roles', function() {
                if ($("#current-roles :selected").length > 0) {
                    $("#remove-roles-btn").removeClass("disabled");
                } else {
                    $("#remove-roles-btn").addClass("disabled");
                }
            });

            var addTeams = function(teams) {
                var $list = $('.staff-editor .current-teams');
                var listItems = '';
                for (var i = 0; i < teams.length; i++) {
                    var team = teams[i];
                    listItems += '<li id=' + team.Key + '><span>' + team.Name + '</span><a data-icon="&#xe0a7;" class="remove-btn">Remove</a><div class="modal-loading-indicator hidden"></div></li>';

                }
                $list.html($list.html() + listItems);
            };

            $.getJSON(teamApiBaseUri + '/GetByStaffKey?staffKey=' + staffKey, function(results) {
                addTeams(results);
            }).fail(function(error) {

            });

            $('.staff-editor .current-teams').on('click', '.remove-btn', function(e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                var listItem = $(this).parent();
                var id = listItem[0].id;
                var $loader = listItem.find('.modal-loading-indicator').show();
                var staffKeysArray = new Array();
                staffKeysArray.push(staffKey);
                $.ajax({
                    type: "POST",
                    url: teamBaseUri + '/RemoveStaff/' + id,
                    data: { staffKeysToRemove: staffKeysArray },
                    traditional: true
                }).done(function() {
                    listItem.remove();
                }).fail(function() {
                    alert('Server error please retry.');
                })
                    .always(function() { $loader.hide(); });
            });

            $('.staff-editor .teams').on('selectionChanged', function(evt, data) {
                if (data && $('#' + data.Key).length === 0) {
                    $('.staff-editor .teams .add-btn').removeAttr("disabled").attr("href", teamBaseUri + '/AddStaff/' + data.Key);
                } else {
                    $('.staff-editor .teams .add-btn').attr("disabled", "disabled");
                }
            });

            $('.staff-editor .teams .add-btn').ajaxLink({
                getData: function() {
                    var staffGuids = new Array();
                    staffGuids.push(staffKey);
                    return { staffKeysToAdd: staffGuids };
                },
                success: function() {
                    var finder = $('.staff-editor .teams [data-control="finder"]').finder();
                    var team = finder.selectedData;
                    addTeams([team]);
                    finder.clearSelected();
                }
            });
        });
    </script>
    <noscript>This site contains certain features and services that require javascript in order to function properly. Please enable javascript in your browser and try again.</noscript>
}
